{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","counterReducer","state","action","type","CounterDisplay","count","useContext","React","createElement","App","name","setName","useState","showCounter","setShowCounter","dispatch","useReducer","inputRef","useRef","renderCount","contextValue","useEffect","current","console","log","Provider","value","style","padding","ref","onChange","e","target","placeholder","onClick","focusInput","focus","marginTop","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"+JAEA,MAAMA,EAAaC,0BAEbC,EAAiBA,CAACC,EAAOC,KAC3B,OAAQA,EAAOC,MACX,IAAK,YACD,OAAOF,EAAQ,EACnB,IAAK,YACD,OAAOA,EAAQ,EACnB,IAAK,QACD,OAAO,EACX,QACI,OAAOA,IA6EbG,EAAiBA,KACnB,MAAMC,MAAEA,GAAUC,qBAAWR,GAC7B,OAAOS,IAAAC,cAAA,UAAI,qBAAmBH,IAGnBI,MA9EHA,KACR,MAAOC,EAAMC,GAAWC,mBAAS,KAC1BC,EAAaC,GAAkBF,oBAAS,IAExCP,EAAOU,GAAYC,qBAAWhB,EAAgB,GAE/CiB,EAAWC,iBAAO,MAClBC,EAAcD,iBAAO,GAErBE,EAAe,CAAEf,QAAOU,YAE9BM,oBAAU,KACNF,EAAYG,SAAW,EACvBC,QAAQC,qBAAqBd,MAC9B,CAACA,IAEJW,oBAAU,KACNE,QAAQC,IAAI,yBACL,IAAMD,QAAQC,IAAI,0BAC1B,IAMH,OACIjB,IAAAC,cAACV,EAAW2B,SAAQ,CAACC,MAAON,GACxBb,IAAAC,cAAA,OAAKmB,MAAO,CAAEC,QAAS,SACnBrB,IAAAC,cAAA,UAAI,gCAEJD,IAAAC,cAAA,WACID,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,SACIqB,IAAKZ,EACLd,KAAK,OACLuB,MAAOhB,EACPoB,SAAWC,GAAMpB,EAAQoB,EAAEC,OAAON,OAClCO,YAAY,0BAEhB1B,IAAAC,cAAA,UAAQ0B,QAlBLC,KACflB,EAASK,QAAQc,UAiBwB,eAC7B7B,IAAAC,cAAA,SAAG,oBAAaE,IAGpBH,IAAAC,cAAA,OAAKmB,MAAO,CAAEU,UAAW,SACrB9B,IAAAC,cAAA,UAAI,cACJD,IAAAC,cAAA,UAAI,YAAUH,GACdE,IAAAC,cAAA,UAAQ0B,QAASA,IAAMnB,EAAS,CAAEZ,KAAM,eAAgB,gBACxDI,IAAAC,cAAA,UAAQ0B,QAASA,IAAMnB,EAAS,CAAEZ,KAAM,eAAgB,YACxDI,IAAAC,cAAA,UAAQ0B,QAASA,IAAMnB,EAAS,CAAEZ,KAAM,WAAY,aAGxDI,IAAAC,cAAA,OAAKmB,MAAO,CAAEU,UAAW,SACrB9B,IAAAC,cAAA,UAAI,cACJD,IAAAC,cAACJ,EAAc,OAGnBG,IAAAC,cAAA,OAAKmB,MAAO,CAAEU,UAAW,SACrB9B,IAAAC,cAAA,UAAI,UACJD,IAAAC,cAAA,SAAG,uBAAkBW,EAAYG,UAGrCf,IAAAC,cAAA,OAAKmB,MAAO,CAAEU,UAAW,SACrB9B,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,UAAQ0B,QAASA,IAAMpB,GAAgBD,IAClCA,EAAc,gBAAkB,sBAEpCA,GAAeN,IAAAC,cAACJ,EAAc,UCvEpCkC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAV,EAAA,GAAAW,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH/C,IAAAC,cAACD,IAAMgD,WAAU,KACfhD,IAAAC,cAACC,EAAG,QAOR6B","file":"static/js/main.b5c25a0a.chunk.js","sourcesContent":["import React, { useState, useReducer, useEffect, useContext, useRef, createContext } from 'react';\n\nconst AppContext = createContext();\n\nconst counterReducer = (state, action) => {\n    switch (action.type) {\n        case 'increment':\n            return state + 1;\n        case 'decrement':\n            return state - 1;\n        case 'reset':\n            return 0;\n        default:\n            return state;\n    }\n};\n\nconst App = () => {\n    const [name, setName] = useState('');\n    const [showCounter, setShowCounter] = useState(true);\n\n    const [count, dispatch] = useReducer(counterReducer, 0);\n\n    const inputRef = useRef(null);\n    const renderCount = useRef(0);\n\n    const contextValue = { count, dispatch };\n\n    useEffect(() => {\n        renderCount.current += 1;\n        console.log(`Name updated: ${name}`);\n    }, [name]);\n\n    useEffect(() => {\n        console.log('Komponent zamontowany');\n        return () => console.log('Komponent odmontowany');\n    }, []);\n\n    const focusInput = () => {\n        inputRef.current.focus();\n    };\n\n    return (\n        <AppContext.Provider value={contextValue}>\n            <div style={{ padding: '16px' }}>\n                <h1>Demonstracja hooków React</h1>\n\n                <div>\n                    <h2>useState</h2>\n                    <input\n                        ref={inputRef}\n                        type=\"text\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        placeholder=\"Wpisz swoje imię\"\n                    />\n                    <button onClick={focusInput}>Ustaw focus</button>\n                    <p>Twoje imię: {name}</p>\n                </div>\n\n                <div style={{ marginTop: '16px' }}>\n                    <h2>useReducer</h2>\n                    <h3>Licznik: {count}</h3>\n                    <button onClick={() => dispatch({ type: 'increment' })}>Zwiększ</button>\n                    <button onClick={() => dispatch({ type: 'decrement' })}>Zmniejsz</button>\n                    <button onClick={() => dispatch({ type: 'reset' })}>Zresetuj</button>\n                </div>\n\n                <div style={{ marginTop: '16px' }}>\n                    <h2>useContext</h2>\n                    <CounterDisplay />\n                </div>\n\n                <div style={{ marginTop: '16px' }}>\n                    <h2>useRef</h2>\n                    <p>Liczba renderów: {renderCount.current}</p>\n                </div>\n\n                <div style={{ marginTop: '16px' }}>\n                    <h2>useEffect</h2>\n                    <button onClick={() => setShowCounter(!showCounter)}>\n                        {showCounter ? 'Ukryj licznik' : 'Pokaż licznik'}\n                    </button>\n                    {showCounter && <CounterDisplay />}\n                </div>\n            </div>\n        </AppContext.Provider>\n    );\n};\n\nconst CounterDisplay = () => {\n    const { count } = useContext(AppContext);\n    return <h3>Globalny licznik: {count}</h3>;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}